# -*- coding: utf-8 -*-
"""agent.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bXDN_3Oj1ts_NH14j7qcl077aVlA3Xt2
"""

import torch
import numpy as np

class OUNoise(object):
    def __init__(self, action_space, mu=0.0, theta=0.25, max_sigma=0.3, min_sigma=0.3, decay_period=10000):
        self.mu           = mu
        self.theta        = theta
        self.sigma        = max_sigma
        self.max_sigma    = max_sigma
        self.min_sigma    = min_sigma
        self.decay_period = decay_period
        self.action_dim   = 3
        self.low          = -1
        self.high         = 1
        self.reset()
        
    def reset(self):
        self.state = np.ones(self.action_dim) * self.mu
        
    def evolve_state(self):
        x  = self.state
        dx = self.theta * (self.mu - x) + self.sigma * np.random.randn(self.action_dim)
        self.state = x + dx
        return self.state
    
    def get_action(self, action, t=0): 
        ou_state = self.evolve_state()
        self.sigma = self.max_sigma - (self.max_sigma - self.min_sigma) * min(1.0, t / self.decay_period)
        return np.clip(action + ou_state, self.low, self.high)



class Memory:
    def __init__(self, max_size):
        self.memory_size = max_size
        self.buffer = [None]*self.memory_size  
        self.current_index = 0
        self.size = 0

    
    def push(self, state, action, reward, next_state, done):
        self.buffer[self.current_index] = ((state), action, np.array([reward]), next_state, done)
        self.current_index += 1
        self.size = min(self.size+1, self.memory_size)
        if self.current_index >= self.memory_size:
            self.current_index -= self.memory_size

    def sample(self, batch_size):
        # first we randomly sample some indices
        samples_index  = np.floor(np.random.random((batch_size,))*self.size)

        # select the experience from the sampled index
        samples = [self.buffer[int(i)] for i in samples_index]
        state_batch = []
        action_batch = []
        reward_batch = []
        next_state_batch = []
        done_batch = []

        for experience in samples:
            state, action, reward, next_state, done = experience
            state_batch.append(state)
            action_batch.append(action)
            reward_batch.append(reward)
            next_state_batch.append(next_state)
            done_batch.append(done)
        
        return state_batch, action_batch, reward_batch, next_state_batch, done_batch

    def __len__(self):
        return len(self.buffer)

class Agent():

  def __init__(self, env_specs):
    self.actor = Actor()
    self.critic = Critic()
    self.targActor = Actor()
    self.targCritic = Critic()
    self.actorOpt = torch.optim.Adam(self.actor.parameters(), lr=1e-4, weight_decay=0.005)
    self.criticOpt = torch.optim.Adam(self.critic.parameters(), lr=1e-3, weight_decay=0.005)
    self.loss = torch.nn.MSELoss()
    self.gamma = 0.99
    self.rho = 0.003
    self.env_specs = env_specs
    self.step=0
    self.memory = Memory(500000)   
    self.noise = OUNoise(3)

  def load_weights(self,root_path):
    model_dict = torch.load(root_path+'weights.pth')
    self.actor.load_state_dict(model_dict['actor_weights'])
    self.critic.load_state_dict(model_dict['critic_weights'])
    self.criticOpt.load_state_dict(model_dict['Coptimizer_param'])
    self.actorOpt.load_state_dict(model_dict['Aoptimizer_param'])

  def save_weights(self, root_path):

    torch.save({'actor_weights': self.actor.state_dict(),
                    'critic_weights': self.critic.state_dict(),
                    'Coptimizer_param': self.criticOpt.state_dict(),
                    'Aoptimizer_param': self.actorOpt.state_dict()
                    }, root_path+'weights.pth')
    print("Saved Model Weights!")

  def act(self, curr_obs, mode):
    device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')
    self.actor.to(device)
    self.critic.to(device)
    self.targActor.to(device)
    self.targCritic.to(device)
    
    if self.step==0:
      self.noise.reset()
    if mode=='eval':
        action = self.actor.forward(torch.from_numpy(curr_obs).float().to(device)).cpu().detach().numpy()
    else:
      action = self.actor.forward(torch.from_numpy(curr_obs).float().to(device)).cpu().detach().numpy()
      action=self.noise.get_action(action, self.step)
    return action


  def update(self, curr_obs, action, reward, next_obs, done, timestep):
    batch_size=64
    if timestep==0:
      self.noise.reset()
    self.memory.push(curr_obs, action, reward, next_obs, done)
    self.step=timestep
    device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')


    if self.memory.size>batch_size:
        state, action, reward, new_state, done = self.memory.sample(batch_size)
        state = torch.from_numpy(np.array(state)).float().to(device)
        action = torch.from_numpy(np.array(action)).float().to(device)
        reward = torch.from_numpy(np.array(reward)).float().to(device)
        new_state = torch.from_numpy(np.array(new_state)).float().to(device)
        done = torch.from_numpy(np.array(done)).float().to(device)

        
        target = reward+(1-done).view(batch_size,1)*self.gamma*(self.targCritic(new_state, self.targActor(new_state).detach()))
        critic_loss = self.loss(target.detach(), self.critic(state, action))

        self.criticOpt.zero_grad() #new
        critic_loss.backward() 
        self.criticOpt.step()

        policyLoss = -self.critic.forward(state, self.actor.forward(state)).mean()

        self.actorOpt.zero_grad()
        policyLoss.backward()
        self.actorOpt.step()



        for param1, param2 in zip(self.targActor.parameters(), self.actor.parameters()):
            param1.data *= (1-self.rho)
            param1.data += self.rho*param2.data
        for param1, param2 in zip(self.targCritic.parameters(), self.critic.parameters()):
            param1.data *= (1-self.rho)
            param1.data += self.rho*param2.data
    else:
      pass
    

class Actor(torch.nn.Module): #policy

    def __init__(self):
        
        super(Actor, self).__init__()
        self.fc1 = torch.nn.Linear(11, 64)
        self.fc2 = torch.nn.Linear(64, 32)
        self.fc4 = torch.nn.Linear(32, 3)
        torch.nn.init.uniform_(self.fc4.weight, -3*1e-3, 3*1e-3) 
        


    def forward(self, x):

        x =torch.nn.functional.relu(self.fc1(x))
        x = torch.nn.functional.relu(self.fc2(x))
        return torch.tanh(self.fc4(x))

class Critic(torch.nn.Module): #value

    def __init__(self):
        
        super(Critic, self).__init__()
        self.fc1 = torch.nn.Linear(11, 64)
        self.fcA1 = torch.nn.Linear(3, 64)
        self.fc2 = torch.nn.Linear(64, 32)
        self.fc4 = torch.nn.Linear(32, 1)
        torch.nn.init.uniform_(self.fc4.weight, -3*1e-3, 3*1e-3) 


    def forward(self, state, action):
        
        x = torch.nn.functional.relu(self.fc1(state))
        aOut = self.fcA1(torch.nn.functional.relu(action))
        comb = torch.nn.functional.relu(aOut+x)
        out = torch.nn.functional.relu(self.fc2(comb))
        out = self.fc4(out)
        return out